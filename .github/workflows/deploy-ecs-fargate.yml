name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECS_TASK_DEFINITION_FILE: task-definition.json   

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform -chdir="./terraform" init --backend-config=environmentConfig/backend-provider-config.conf -reconfigure -upgrade

      #- name: Destroy Terraform changes
      #  run: terraform -chdir="./terraform" destroy -var-file="environmentConfig/environment.tfvars" -auto-approve      

      - name: Validate Terraform configuration
        run: terraform -chdir="./terraform" validate

      - name: Plan Terraform changes
        run: terraform -chdir="./terraform"  plan -var-file="environmentConfig/environment.tfvars"

      - name: Apply Terraform changes for all resources
        run: terraform -chdir="./terraform" apply -var-file="environmentConfig/environment.tfvars"  -auto-approve      
  
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Terraform Variables
        run: | 
             echo "ECR_REPOSITORY_NAME=$(terraform -chdir="./terraform" output -raw ecr_repository_name)" >> $GITHUB_ENV
             echo "ECS_CLUSTER_NAME=$(terraform -chdir="./terraform" output -raw ecs_cluster_name)" >> $GITHUB_ENV
             echo "ECS_SERVICE_NAME=$(terraform -chdir="./terraform" output -raw ecs_service_name)" >> $GITHUB_ENV   
             echo "ECS_TASK_DEFINITION_NAME=$(terraform -chdir="./terraform" output -raw ecs_task_definition_name)" >> $GITHUB_ENV          
             echo "ECS_TASK_CONTAINER_NAME=$(terraform -chdir="./terraform" output -raw ecs_task_container_name)" >> $GITHUB_ENV                               
             
      - name: Display Terraform Variables
        run: | 
             echo "ECR Repository Name - $ECR_REPOSITORY_NAME"
             echo "ECS Cluster Name - $ECS_CLUSTER_NAME"
             echo "ECS Service Name - $ECS_SERVICE_NAME"                         
             echo "ECS Task Definition Name - $ECS_TASK_DEFINITION_NAME" 
             echo "ECS Task Container Name - $ECS_TASK_CONTAINER_NAME" 

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
               aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NAME --query taskDefinition > ${{ env.ECS_TASK_DEFINITION_FILE }}
  

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
            container-name: ${{ env.ECS_TASK_CONTAINER_NAME }}
            image: ${{ steps.build-image.outputs.image }}
  
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE_NAME }}
            cluster: ${{ env.ECS_CLUSTER_NAME }}
            wait-for-service-stability: true