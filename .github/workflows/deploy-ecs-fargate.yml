name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1                   # set this to your preferred AWS region, e.g. us-west-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Terraform CLI
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        run: terraform -chdir="./terraform" init --backend-config=environmentConfig/backend-provider-config.conf -reconfigure -upgrade

      - name: Validate Terraform configuration
        run: terraform -chdir="./terraform" validate

      - name: Plan Terraform changes
        run: terraform -chdir="./terraform"  plan -var-file="environmentConfig/environment.tfvars"

      - name: Apply Terraform changes
        run: terraform -chdir="./terraform" apply -var-file="environmentConfig/environment.tfvars" -auto-approve      

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract Terraform Variables
        run: | 
             echo "ECR_REPOSITORY_ARN=$(terraform -chdir="./terraform" output -raw ecr_repository_arn)" >> $GITHUB_ENV
             echo "ECR_REPOSITORY_NAME=$(terraform -chdir="./terraform" output -raw ecr_repository_name)" >> $GITHUB_ENV
             echo "ECS_CLUSTER_ARN=$(terraform -chdir="./terraform" output -raw ecs_cluster_arn)" >> $GITHUB_ENV
             echo "ECS_CLUSTER_NAME=$(terraform -chdir="./terraform" output -raw ecs_cluster_name)" >> $GITHUB_ENV
             echo "ECS_TASK_DEFINITION_ARN=$(terraform -chdir="./terraform" output -raw ecs_task_definition_arn)" >> $GITHUB_ENV
             echo "ECS_TASK_DEFINITION_NAME=$(terraform -chdir="./terraform" output -raw ecs_task_definition_name)" >> $GITHUB_ENV

      - name: Display Terraform Variables
        run: | 
             echo "ECR Repository ARN - $ECR_REPOSITORY_ARN"
             echo "ECR Repository Name - $ECR_REPOSITORY_NAME"
             echo "ECS Cluster ARN - $ECS_CLUSTER_ARN"
             echo "ECS Cluster Name - $ECS_CLUSTER_NAME"
             echo "ECS Task Definition ARN - $ECS_TASK_DEFINITION_ARN"
             echo "ECS Task Definition Name - $ECS_TASK_DEFINITION_NAME"             

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Update ECS Task Definition
        run: |
          # Fetch the existing task definition ARN
          CURRENT_TASK_ARN=$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NAME --query "taskDefinition.taskDefinitionArn" --output text)
          echo "CURRENT_TASK_ARN - $CURRENT_TASK_ARN"

           # Fetch the task definition json and update
          echo "$(aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION_NAME)  " >> new-task-definition.json 
          more new-task-definition.json
          sed -E 's/"image": "[^"]*"/"image": "$ECR_REGISTRY/$ECR_REPOSITORY_NAME:$IMAGE_TAG"/' new-task-definition.json
          more new-task-definition.json


          # Create a new revision of the existing task definition
          NEW_REVISION=$(aws ecs register-task-definition --cli-input-json file://new-task-definition.json --query "taskDefinition.taskDefinitionArn" --output text)

          # Print the new task definition revision
          echo "New Task Definition Revision: $NEW_REVISION"